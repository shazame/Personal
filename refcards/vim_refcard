J -> supprimer saut de ligne

H -> positionner curseur en haut du buffer
M -> positionner curseur au milieu du buffer
L -> positionner curseur en bas du buffer

zz -> centre le buffer sur le curseur

ga -> code ascii du caractère

<c-e> -> insert from below
<c-y> -> insert from above

`` -> remettre le curseur à la position du dernier saut

<C-o> -> remonte dans l'historique des positions du curseur

gqq -> formatter le texte pour ne pas dépasser les 78 caractères sur une ligne

daw -> Delete A Word

<c-x><c-f> -> (en mode insertion) autocomplétion avec nom d'un fichier
<c-x><c-l> -> (en mode insertion) autocomplétion avec ligne du fichier
<c-x><c-v> -> (en mode insertion) autocomplétion avec commande vim

:put=(1+3)*4/1.2
-> va écrire le résultat de l'expression

:put='je '.'concatène'.' plusieurs chaines'
-> va écrire le résultat de la concaténation des chaînes

:for i in range(1,10) | if i > 5 | put =i | endif | endfor
-> boucle et condition sous vim

:diffthis -> pour comparer deux fichiers ouvert dans des fenètres splitées
taper cette commande dans chacune des fenètre pour entrer dans le mode
Ou entrer $vimdiff file1 file2 dans un shell

:echo expand('%') -> pour afficher le nom du fichier
:echo expand('%:e') -> pour afficher l'extension du fichier
:echo expand('%:r') -> pour afficher le nom du fichier sans l'extension
:echo expand('%:p') -> pour afficher le chemin complet du fichier
:echo @% -> directory/name of file

:if expand('%:e')=='c' | put='c' | elseif expand('%:e')=='h' | put='h' | else | put='perdu:'.expand('%:e') | endif
-> affiche effectue un traitement suivant l'extension du fichier

:args
-> donne la liste des arguments avec lequel a été ouvert vim

:argument
-> ouvre vim avec les arguments initiaux

:r <file>
-> ajoute le contenu du fichier <file> au fichier en cours d'édition

:tjump nom_fonction
-> pour aller sur la déclaration d'un identifiant
et
<C-]>
-> pour sauter à la déclaration d'un identifiant lorsque l'on est sur un
occurence ce celui-ci.
Remarque : ces deux commandes sont à combiner avec ctags

<C-w><C-o>
-> ferme touts les buffers sauf le buffer courant

gU
-> pour mettre en majuscule
gu
-> pour mettre en minuscule
g~
-> pour changer la case
ex : gUiw -> met en majuscule l'inner word

:g
-> permet d'effectuer une sélection sur les lignes suivant une regexp
:g/^\$
-> selection toutes les lignes qui commencent par '$'
:g/^->/s/pour/Pour/g
-> permet de remplacer "pour" par "Pour" dans toutes les lignes qui commencent
par "->"

:%s/\n/\s/
-> remplace tous les sauts de lignes par un espace
\n caractérise un saut de ligne
\s caractérise un espace

/\s\s
puis
:s//\s/g
-> recherche tous les double espaces, puis les remplace par un simple espace

:s/^\(\w\)/\u\1/
-> If the first character at the beginning of the current line is lowercase,
switch it to uppercase using \u

:%s/positionnner \(curseur\) \(..\)/Positionner \U\1 \u\2/
-> a tester dans ce fichier pour comprendre
When searching:
\(foo\) makes a backreference to foo. Parenthesis without escapes are literally matched. Here the \ is required for the closing \).
When replacing:
\r is newline, \n is a null byte (0x00).
\& is ampersand (& is the text that matches the search pattern).
\1 inserts the text of the first backreference. \2 inserts the second backreference, and so on.

/permet
puis
:s//\U&/
-> recherche le mot permet, puis le met tout en majuscule
\l and \L for lower case

:put=range(1,150)
:put=map(range(1,150), 'printf(''%04d'', v:val)')
-> pour écrire une liste de nombres de 2 façons différentes

:.,$s/.*/"&"/
-> pour mettre des guillemets au début et à la fin de toutes les lignes,
à partir de la ligne courante jusqu'à la dernière ligne

:.,$g/^\d/exe "normal! \<C-a>"
-> incrémente tous les nombres entre la ligne courante et la dernière ligne

TOUJOURS PLUS PUISSANT :
<range>perldo s/(\d+)/$1+1/ge
-> s'ils y a plusieurs nombres sur une ligne ils seront tous incrémentés
À partir de là on peut faire ce que l'on veut :
<range>perldo s/(\d+)/($1+5\/2)*3/ge

:g/^->/exe "normal: VU"
-> met en majuscule toutes les lignes qui commencent par "->"
:g/^->/s/.*/\U&/
-> fait la même chose

:g/^->/z#.3|echo "========="
-> affiche le contexte du <pattern> donné

:g/^/m0
-> reverse a file
:150,$g/^/m149
-> reverse from ligne 150

exemple de ligne à ajouter dans un fichier pour modifier la configuration de
vim pour ce fichier
dans un fichier .c :
// vim: set tabstop=2 shiftwidth=2 softtabstop=2 expandtab:
dans le vimrc :
" vim: set foldmarker={,} foldlevel=0 foldmethod=marker:

gj and gk
-> navigation in a long line

==============================================================================
=========================   Commandes du terminal   ==========================
==============================================================================

# Lancer un shell
:sh

# Lancer une commande shell
:! ls
# Lancer un commande shell sans quitter la fenêtre vim
:w !ls

# Insérer le résultat d'une commande dans un fichier
:r!ls

# Remplacer la ligne courante par le résultat d'une commande
!w puis ls
# ou
!! puis <cmd>

# Appliquer une commande au fichier
:%!<cmd>
# Exemple : trier le fichier
:%!sort

# Sélectionner les lignes d'un fichier commençant par un 0 ou contenant le mot 'int'
:%!grep -E '^0|\<int\>'
# Autre solution avec g :
:g/^0|\<int\>/

# Exemple : compter les mots (autre solution que g<C-g>)
:w !wc -w

# Executer une commande shell à partir d'une selection vim
# selectionner puis tapper :
:w !bash
# ligne de test :
echo toto
# Utilisation pratique :
#  - faire un :r!ls d'un repertoire dont on veut renommer tous les fichiers
#  - éditer les lignes de façon à avoir l'équivalent d'un script shell
#  - sélectionner et envoyer les commandes au shell

mv klwekl  test_klwekl;
mv otor    test_otor;
mv wkjf    test_wkjf;
mv lkjlfew test_lkjlfew;
mv wlkjl   test_wlkjl;
mv titi    test_titi;

==============================================================================
=======================   Utilisation des quicklist   ========================
==============================================================================

# Lorsqu'une quicklist a été créée il est possible de l'afficher
:cl
# Il est possible de passer d'une ligne de la quicklist a une autre
:cN et :cn
# Il est possible de passer à la prochaine ligne mais en sautant au prochain
# fichier
:cNf et :cnf
# Un truc trop puissant qui permet de naviguer facilement dans la quicklist
:cope

          ==========   Surpuissant pour la compilation   ===========

# La quicklist peut-être utilisée après un :make pour naviguer entre les erreurs
:make

      ==========   Surpuissant pour la recherche de patterns   ===========

# Utilisation après un :vim pour naviguer entre les résultats de la recherche
# ex : recherche d'un pattern récursivement dans tous les fichiers .c et .h du
# dossier courant et tous les sous-dossiers
:vim /trajectory_goto_*/ **/*.[ch]

==============================================================================
===============================   Registres   ================================
==============================================================================

:reg

# En mode insertion :
<C-r><nom_du_registre>  # <C-R> is equivalent to <C-r>
# insère le contenu du registre
# ex :
# insérer le nom du fichier
<C-r>%
# insérer la dernière commande tapée
<C-r>:
# printer le résultat du calcul
<C-r>= <entrer une opération>
# fonctionne aussi avec les opérations de base :
# cos, sin, tan, exp, log, sqrt, pow, ...
<C-r>=cos(32.4)*cos(32.4)+sin(32.4)*sin(32.4)
# -> 1.0

# Utilisation avancée
# Copier la ligne suivante
cos(32.4)*cos(32.4)+sin(32.4)*sin(32.4)
# Et faire :
i<C-r>=<C-r>"<Enter>


================================================================================
=============================  Jouer avec le man  ==============================
================================================================================

K -> rechercher le mot/la selection dans le man

:runtime ftplugin/man.vim
# puis
:Man <commande>
# ouvre un man en couleur de la commande
# Possibilité de naviguer entre pages de man avec <C-]> et de revenir en
# arrière dans les pages de man avec <C-T>


================================================================================
============================   Jouer avec les tab   ============================
================================================================================

# Ouvrir la fenêtre courante dans une nouvelle tab
# Pratique pour avoir l'équivalent d'un <C-w>o et garder les split courants
:tab sp

# Ouvrir l'aide dans une nouvelle tab
:tab help gt

# Ouvrir l'aide dans un buffer vertical
:vert help Man


================================================================================
============================   Jouer avec les tag   ============================
================================================================================

# Plein d'infos sympa dans :
:help window-tag


================================================================================
==============================   The power of g   ==============================
================================================================================

# Afficher des informations sur un fichier (nombre de mots, lignes, etc.)
# Possible de faire une sélection [verticale] avant pour application a la sélection
g<C-g>

# Endormir vim pendant N secondes (:help sleep) :
[N]gs


================================================================================
=============================   Paterns spéciaux   =============================
================================================================================

# /\%c and /\%v matches a specific column of virtual column
# :help \%
# exemple : match n'importe quoi sur la 20e colonne
/\%20c.
# exemple : sur les lignes suivantes, cette commande va aligner la deuxième
# colonne sur la 40 colonne de caractères
'<,'>s/\%40v\s*//

lwkjef                                 wefklj
welfkjwefjlfewk                        wefjklewf
weflkjwlef                             wfkjwelkf
wlfkjwlkef                             weflkjwef
jwelklwkf                              llkjflwewklefjl
wjklelkfwj                             wekfjew
wejkfwlkfe                             wflkklwejfwjfk
ejkwefwk                               wefkljwlek
wlejfwlekjflkwejflwkjflew              wekfljwel


================================================================================
===========================   Déplacement de ligne   ===========================
================================================================================

:m <address>
# Déplacer la ligne à la première ligne :
:m0
# Déplacer la ligne à la dernière ligne :
:m$
# Déplacer la ligne vers le bas :
:m+1
# Déplacer la ligne vers le haut :
:m-2


================================================================================
===============================  File encryption ===============================
================================================================================

:X
# You are prompt to enter a key
# Type it, save the file
:x
# Now the file is encrypted
# each time you will open the file with vim, you will be asked for the key
# No other editor can be used to open it
